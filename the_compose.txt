from typing import Callable

def compose(f: Callable, g: Callable) -> Callable:
    """
    Returns a new function that applies the second function to the result of the first function.
    """
    def h(x):
        return g(f(x))
    return h

def test_compose():
    # Test case 1 - composing two identity functions
    assert compose(lambda x: x, lambda x: x)(1) == 1

    # Test case 2 - composing two simple functions
    assert compose(lambda x: x * 2, lambda x: x + 1)(3) == 7

    # Test case 3 - composing two functions with different argument and return types
    assert compose(lambda x: str(x), lambda x: int(x))(123) == 123

    # Test case 4 - composing a function with itself
    f = lambda x: x * 2
    g = compose(f, f)
    assert g(3) == 12

    # Test case 5 - composing functions that raise exceptions
    def raise_error(x):
        raise ValueError("Error")
    try:
        compose(lambda x: x, raise_error)(1)
    except ValueError:
        pass
    else:
        assert False, "Expected ValueError"


###The given code provides a function compose that takes two functions f and g as input and returns a new function that applies g to the result of f.
 ###The function is tested with five test cases that cover various scenarios, including composing two identity functions, two simple functions, two functions with different argument and return types, 
###a function with itself, and functions that raise exceptions. All test cases pass, indicating that the compose function works correctly.